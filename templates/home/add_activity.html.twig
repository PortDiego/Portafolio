{% extends 'base.html.twig' %}

{% block title %}Añadir Nueva Actividad{% endblock %}

{% block content %}
<div class="container-fluid px-4">
    <h1 class="mt-4">Añadir Nueva Actividad</h1>

    <div class="card mb-4">
        <div class="card-body">
            <form method="post" enctype="multipart/form-data">
                {{ form_start(form) }}

                {{ form_widget(form.delete_photo, {'attr': {'style': 'display: none;'}}) }}

                <div class="mb-3 position-relative">
                    <label for="subcategory-search" class="form-label">Buscar Subcategoría</label>
                    <input type="text" id="subcategory-search" class="form-control form-control-lg border-primary" placeholder="Escribe para buscar...">
                    <ul id="subcategory-dropdown" class="list-group position-absolute w-100" style="z-index: 1000; display: none; max-height: 200px; overflow-y: auto;">
                    </ul>
                </div>

                <div class="mb-3">
                    {{ form_label(form.name_activity, 'Nombre de la Actividad') }}
                    <div class="input-group">
                        {{ form_widget(form.name_activity, {'attr': {'class': 'form-control form-control-lg border-primary'}}) }}
                    </div>
                    {{ form_errors(form.name_activity) }}
                </div>

                <div class="mb-3">
                    {{ form_label(form.category, 'Categoría') }}
                    <div class="input-group">
                        {{ form_widget(form.category, {'attr': {'class': 'form-control form-control-lg border-primary'}}) }}
                    </div>
                    {{ form_errors(form.category) }}
                </div>

                {{ form_row(form.catalog, { 'attr': {'type': 'hidden', 'id': 'finished_activity_catalog' }}) }}

                <div id="subcategory-container" class="mb-3" style="display: none;">
                    <label for="subcategory-select" class="form-label">Subcategoría</label>
                    <select id="subcategory-select" class="form-control form-control-lg border-primary">
                        <option value="">Selecciona una Subcategoría</option>
                    </select>
                </div>

                <div class="mb-3">
                    {{ form_label(form.photos, 'Foto') }}
                    <div class="input-group">
                        {{ form_widget(form.photos, {'attr': {'class': 'form-control form-control-lg border-primary'}}) }}
                    </div>
                    {{ form_errors(form.photos) }}
                </div>

                <div class="mb-3">
                    {{ form_label(form.date, 'Fecha de la Actividad') }}
                    <div class="input-group">
                        {{ form_widget(form.date, {'attr': {'class': 'form-control form-control-lg border-primary'}}) }}
                    </div>
                    {{ form_errors(form.date) }}
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary btn-lg">Guardar Actividad</button>
                    <a href="{{ path('app_home') }}" class="btn btn-outline-secondary btn-lg">Cancelar</a>
                </div>

                {{ form_end(form) }}
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var categorySelect = document.getElementById('finished_activity_category');
        var subcategorySelect = document.getElementById('subcategory-select');
        var subcategoryContainer = document.getElementById('subcategory-container');
        var subcategorySearch = document.getElementById('subcategory-search');
        var subcategoryDropdown = document.getElementById('subcategory-dropdown');
        var hiddenActivityId = document.getElementById('finished_activity_catalog');

        let allSubcategories = [];

        function loadAllSubcategories() {
            fetch('/subcategory/all')
                .then(response => response.json())
                .then(subcategories => {
                    allSubcategories = subcategories;
                    subcategories.forEach(function (subcategory) {
                        var option = new Option(subcategory.name, subcategory.id);
                        subcategorySelect.add(option);
                    });
                })
                .catch(error => {
                    console.error('Error al cargar todas las subcategorías:', error);
                });
        }

        function updateSubcategories() {
            const categoryID = categorySelect.value;
            const selectedSubcategoryID = subcategorySelect.value;

            subcategorySelect.innerHTML = '<option value="">Selecciona una Subcategoría</option>';
            subcategoryDropdown.style.display = 'none';

            if (!categoryID) {
                subcategoryContainer.style.display = 'none';
                return;
            }

            fetch('/finishedActivity/subcategories/' + categoryID)
                .then(response => response.json())
                .then(subcategories => {
                    let subcategoryExists = false;

                    subcategories.forEach(function (subcategory) {
                        const option = new Option(subcategory.name, subcategory.id);
                        subcategorySelect.add(option);

                        if (subcategory.id == selectedSubcategoryID) {
                            subcategorySelect.value = selectedSubcategoryID;
                            subcategoryExists = true;
                        }
                    });

                    if (!subcategoryExists) {
                        subcategorySelect.value = '';
                    }

                    subcategoryContainer.style.display = 'block';
                    updateCatalog();
                })
                .catch(error => {
                    console.error('Error al cargar subcategorías:', error);
                    subcategoryContainer.style.display = 'none';
                });
        }

        async function updateCategory(subcategoryID) {
            try {
                const response = await fetch('/subcategory/' + subcategoryID + '/category');
                const data = await response.json();
                if (data.categoryId) {
                    categorySelect.value = data.categoryId;
                } else {
                    console.error('No se encontró la categoría relacionada.');
                    categorySelect.value = '';
                }
            } catch (error) {
                console.error('Error al obtener la categoría relacionada:', error);
                categorySelect.value = '';
            }
        }

        function updateCatalog() {
            const subcategoryID = subcategorySelect.value;

            if (!subcategoryID) {
                hiddenActivityId.value = '';
                return;
            }

            fetch('/finishedActivity/activity_bbdd/' + subcategoryID)
                .then(response => response.json())
                .then(data => {
                    if (data.id) {
                        hiddenActivityId.value = data.id;
                    } else {
                        hiddenActivityId.value = '';
                        alert('Esta subcategoría no está disponible por el momento.');
                    }
                })
                .catch(error => {
                    console.error('Error al obtener Catalog:', error);
                    hiddenActivityId.value = '';
                });
        }

        function filterSubcategories() {
            const searchQuery = subcategorySearch.value.toLowerCase();

            subcategoryDropdown.innerHTML = '';
            if (!searchQuery) {
                subcategoryDropdown.style.display = 'none';
                return;
            }

            const filteredSubcategories = allSubcategories.filter(subcategory =>
                subcategory.name.toLowerCase().includes(searchQuery)
            );

            if (filteredSubcategories.length > 0) {
                subcategoryDropdown.style.display = 'block';
                filteredSubcategories.forEach(function (subcategory) {
                    const listItem = document.createElement('li');
                    listItem.className = 'list-group-item list-group-item-action';
                    listItem.textContent = subcategory.name;
                    listItem.dataset.id = subcategory.id;

                    listItem.addEventListener('click', async function () {
                        subcategorySearch.value = subcategory.name;
                        subcategorySelect.value = subcategory.id;
                        subcategoryDropdown.style.display = 'none';
                        subcategoryContainer.style.display = 'block';

                        await updateCategory(subcategory.id);
                        updateSubcategories(subcategory.id);
                        updateCatalog();
                    });

                    subcategoryDropdown.appendChild(listItem);
                });
            } else {
                subcategoryDropdown.style.display = 'none';
            }
        }

        subcategorySearch.addEventListener('input', filterSubcategories);
        subcategorySelect.addEventListener('change', function () {
            const subcategoryID = subcategorySelect.value;
            hiddenActivityId.value = subcategoryID;
            updateCatalog(); 
        });
        categorySelect.addEventListener('change', updateSubcategories);
        loadAllSubcategories();
        
    });
</script>

{% endblock %}